<?php

namespace App\Controller\Admin;

use App\Entity\Post;
use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserCrudController extends AbstractCrudController
{
    private UserPasswordHasherInterface $passwordHasher;

    public function __construct(UserPasswordHasherInterface $passwordHasher)
    {
        $this->passwordHasher = $passwordHasher;
    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }


    //apres soumission form
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof User) return;

        $entityInstance->setUpdatedBy($this->getUser());
        $entityInstance->setCreatedBy($this->getUser());

        $plainPassword = $entityInstance->getPlainPassword();
        if (!empty($plainPassword)) {
            $hashed = $this->passwordHasher->hashPassword($entityInstance, $plainPassword);
            $entityInstance->setPassword($hashed);
        }

        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    //avant creation form
    public function createEntity(string $entityFqcn): User
    {
        $user = new User();
        $user->setCreatedAt(new \DateTimeImmutable());
        $user->setUpdatedAt(new \DateTimeImmutable());
        return $user;
    }

    //update form
    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof User) return;
        $entityInstance->setUpdatedBy($this->getUser());
        $entityInstance->setUpdatedAt(new \DateTimeImmutable());

        $plainPassword = $entityInstance->getPlainPassword();
        if (!empty($plainPassword)) {
            $hashed = $this->passwordHasher->hashPassword($entityInstance, $plainPassword);
            $entityInstance->setPassword($hashed);
        }

        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function deleteEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if ($entityInstance instanceof User && $entityInstance->getId() === $this->getUser()?->getId()) {
            $this->addFlash('danger', 'Vous ne pouvez pas supprimer votre propre compte.');
            return; // annule la suppression
        }

        parent::deleteEntity($entityManager, $entityInstance);
    }

    public function configureFields(string $pageName): iterable
    {
        $user = $this->getUser();

        $fields = [
            TextField::new('firstName')->setLabel('Prénom'),
            TextField::new('lastName')->setLabel('Nom de famille'),
            TextField::new('email')->setLabel('Email'),
            ChoiceField::new('roles')
                ->allowMultipleChoices()
                ->renderExpanded(true)
                ->setChoices([
                    'Abonné' => 'ROLE_USER',
                    'Administrateur' => 'ROLE_ADMIN',
                ]),
            TextField::new('plainPassword')
                ->setLabel('Mot de passe')
                ->onlyOnForms()
                ->setRequired($pageName === Crud::PAGE_NEW)
                ->setHelp($pageName === Crud::PAGE_EDIT ? 'Laissez vide pour ne pas changer le mot de passe.' : '')
        ];

        $isActiveField = BooleanField::new('isActive')->setLabel('Actif');

        if (in_array($pageName, [Crud::PAGE_EDIT, Crud::PAGE_INDEX]) && $this->getContext()) {
            $entity = $this->getContext()->getEntity()->getInstance();
            if ($entity instanceof User && $user instanceof User && $entity->getId() === $user->getId()) {
                $isActiveField = $isActiveField
                    ->setFormTypeOption('disabled', true)
                    ->setHelp('Vous ne pouvez pas désactiver votre propre compte.');
            }
        }

        $fields[] = $isActiveField;

        return $fields;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setPageTitle('index', 'Utilisateurs')
            ->setEntityLabelInPlural('Utilisateurs')
            ->setEntityLabelInSingular('Utilisateur')
            ->setPaginatorPageSize(10)
            ->setPageTitle('new', 'Ajouter un utilisateur')
            ->setFormOptions([]); // autres options
    }
}
